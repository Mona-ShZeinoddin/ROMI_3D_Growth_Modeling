"""
Realistic simulation of a growing Arabidopsis inflorescence  
	Ch. Godin
	Inria - 2020
	
Log:
  - Now axes veg-iflo are reiterating with a small growth delay
  - Revisited the management of meristem states and of lateral production control
  - Corrected leaf geometric models as a funtion of age and physio state
  - added @Gc before sweep to have filled leaf-like organs
  - corrected display of carpelss
  - Added the idea that organ models are used to interpolate geom models of organs (used for terminal organs)
  - Corrected another bug due to a confusion between physio age of main meristem and that of lateral production
  - Corrected a bug due to a confusion between physio age of main meristem and that of lateral production
  - replaced the state of a meristem by physio-age and plastnb member variables in meristem class
"""

import os
from openalea.plantgl.all import *
from numpy import arange
import numpy as np
from math import *

##################
# Model variables
##################

# Time is counted in hours in the model
day = 24. # constant defined for convenience in hours

#nb_days = 45 # gauss(MEAN_NB_DAYS,STDEV_NB_DAYS)

nb_days = 20
# Simulation time is given in hours, e.g. 240 corresponds to 10 days
SimulationTime = nb_days*day   # in hours, e.g. 24h * 25 days =

T = 10.                            # plastochrone in hours

#########################
# Simulation Parameters
#########################

dt = 1.                  # in hours. Unique parameter to change
                         # time dicretization (this should hardly affect
                         # simulations beyond integration approximations)

# number of time units for simulation
NbSimulationSteps = int(SimulationTime/float(dt))

BRANCHON = False         # If True, creates long lateral branches. If false, create only lateral flowers
alpha = 137.5				  # conctant divergence angle in degrees

#########################
# Geometry

cm = 1. # 1 cm = 1 PlantGl grid unit

#########################
# Organs
##########################


# Internode
InternodeSize = 1.                # scaling coefficient, to adapt the model petal size to the plant size

InternodeInitialLength = 0.1*cm

##InternodeInitialLength = 0.01*cm
###InternodeInitialDiam = 0.1*cm
InternodeInitialDiam = 0.2*cm
InternodeInitialWidth = 0.1*cm
InternodeInitialOpeningAngle = 0  # (in degrees)

InternodeFinalLength = 3.*cm
####InternodeFinalDiam = 0.3*cm
InternodeFinalDiam = 0.5*cm
InternodeFinalWidth = 0.1*cm
InternodeFinalOpeningAngle = 0   # (in degrees)

InternodeColor = 6

InternodeDelay = 10.0*T       # 20 days
InternodeLifespan = 50*day    # 50 days
InternodeHalfLife = 15*day    # 15 days
InternodeSuddenty = 1.


# Leaf
petiol_prop = 0.3
leafsize = 25.*cm

# Pedicel
PedicelSize = 1.                # scaling coefficient, to adapt the model petal size to the plant size

PedicelInitialLength = 0.01*cm
PedicelInitialDiam = 0.05*cm
###PedicelInitialDiam = 0.01*cm
PedicelInitialWidth = 0.1*cm
PedicelInitialOpeningAngle = 0  # (in degrees)

PedicelFinalLength = 7*cm
###PedicelFinalDiam = 0.15*cm
PedicelFinalDiam = 0.2*cm
PedicelFinalWidth = 0.1*cm
PedicelFinalOpeningAngle = 0   # (in degrees)

PedicelColor = 2

PedicelDelay = 0.0*day
PedicelLifespan = 50*day
PedicelHalfLife = 5*day
PedicelSuddenty = 2.

# Sepals
SepalSize = 1.0                # scaling coefficient, to adapt the petal size to the plant size

SepalInitialLength = 1*cm
SepalInitialDiam = 0.20*cm
#SepalInitialWidth = 3*cm
SepalInitialWidth = 4*cm
#SepalInitialOpeningAngle = 5  # (in degrees)
SepalInitialOpeningAngle = 8 

SepalFinalLength = 2*cm
SepalFinalDiam = 0.20*cm
#SepalFinalWidth = 5*cm
SepalFinalWidth = 6*cm
SepalFinalOpeningAngle = 25   # (in degrees)
#SepalFinalOpeningAngle = 15

SepalColor = 2

SepalDelay = 0.0*day
SepalLifespan = 14.5*day
SepalHalfLife = 10*day
SepalSuddenty = 2.

# Petals
PetalSize = 1.0                # scaling coefficient, to adapt the petal size to the plant size

PetalInitialLength = 0.7*cm
PetalInitialDiam = 0.15*cm
PetalInitialWidth = 2*cm
PetalInitialOpeningAngle = 10  # (in degrees)

PetalFinalLength = 6*cm
##PetalFinalLength = 4*cm
PetalFinalDiam = 0.15*cm
##PetalFinalWidth = 6*cm
PetalFinalWidth = 8*cm
PetalFinalOpeningAngle = 10   # (in degrees)

PetalColor = 0

PetalDelay = 0.0*day
PetalLifespan = 14.5*day
PetalHalfLife = 15*day
PetalSuddenty = 4.

# Carpels
CarpelSize = 1                  # scaling coefficient, to adapt the model petal size to the plant size

CarpelInitialLength = 0.7*cm
##CarpelInitialDiam = 0.01*cm
CarpelInitialDiam = 0.2*cm
CarpelInitialWidth = 0.1*cm
CarpelInitialOpeningAngle = 0  # (in degrees)

CarpelFinalLength = 9*cm
CarpelFinalDiam = 0.5*cm
CarpelFinalWidth = 0.3*cm
CarpelFinalOpeningAngle = 0   # (in degrees)

CarpelColor = 6

CarpelDelay = 5.0*day
CarpelLifespan = 50*day
CarpelHalfLife = 10*day
CarpelSuddenty = 10.

# Discretization
nb_seg = 10           # discretization of a leaf blade
len_seg = 1./nb_seg

MAXELASTICITY = 1.0

#########################
# Meristem 
#########################

# A meristem has a physiological age defined by an integer x
#   x=0 :veg
#   x=1 :veginflo
#   x=2 :inflo
#   x=3 :flower
#

# Durations in physiological ages (in # of plastochrones)
# Simulations times are above the sum of these numbers will
# end up with fruits only

MAXVEGPLAST = 20     # # of plastochrones in vegetative state
MAXVEGINFLOPLAST = 4 # # of plastochrones in veginflo state
MAXINFLOPLAST = 80  # # of plastochrones in inflo state
##MAXINFLOPLAST = 100
# Delay before the growth of a lateral meristem
GrowthDelay = 5*day    # Growth delay of lateral meristems (in hours). Corresponds to the parammeter ITI of Kieffer 1998

##########################
# Interpolation of curves
##########################

# To interpolate between organ curves
def retrieveCurves(name):
  # Determine the set of curve representing axis at different time from the LPy global variables
  # Look for object in global namespace name axisX
  #print(name)
  curves = [(n,v) for n,v in globals().items() if name in n and type(v) == NurbsCurve2D ]
  # sort curves according to their names
  for n,v in curves: v.name = n
  curves = [v for n,v in curves]
  curves.sort(key = lambda x : x.name)
  #for v in curves: print(v.name)

  return curves


# To interpolate between organ curves
def retrieveCurves(name):
  # Determine the set of curve representing axis at different time from the LPy global variables
  # Look for object in global namespace name axisX
  #print(name)
  curves = [(n,v) for n,v in globals().items() if name in n and type(v) == NurbsCurve2D ]
  # sort curves according to their names
  for n,v in curves: v.name = n
  curves = [v for n,v in curves]
  curves.sort(key = lambda x : x.name)
  #for v in curves: print(v.name)

  return curves


sepal_curves = retrieveCurves('sepal_nerve')
nbSepalcurves = len(sepal_curves)
# ProfileInterpolation takes a set of curves and an ordered list of indexes between 0 and 1
# indicating which interpolation index is assigned to each curve.
sepal_curves_func = ProfileInterpolation(sepal_curves, [i/float(nbSepalcurves-1) for i in range(nbSepalcurves)])

petal_curves = retrieveCurves('petal_nerve')
nbPetalcurves = len(petal_curves)
# ProfileInterpolation takes a set of curves and an ordered list of indexes between 0 and 1
# indicating which interpolation index is assigned to each curve.
petal_curves_func = ProfileInterpolation(petal_curves, [i/float(nbPetalcurves-1) for i in range(nbPetalcurves)])


#########################
# Simulation code
#########################

#########################
# Numerical parameters
eps = 0.00001           # equality threshold for 2 real numbers 

# HillCurve: an S shape function controlled by:
# - x is the input value
# - x0 is the shift in x before the curve starts to increase (no shift by default)
# - yrange =[ymin,ymax]: the minimal and maximal values of y (ymin reached for x = x0
#   note that delta2ymax: such that ymax = ymin + delta2ymax
# - xa: such that x0 + xa is the x-location of the inflexion point (at x0+xa: y = y0+delta2ymax/2)
# - n: the curve stiffness (the larger n the stiffer the curve)
# Note that for n = 1 the curve has no inflexion point
# a and x0 are parameters related to x-axis. If the time for example is dilated
# (by saying for example that a plastochrone is doubled, then these parameters
# should also be scaled accordingly. This is why they are always given
# as a function of the plastochrone when calls are made to hillcurve.

def hillcurve(x,x0,yrange,xa,n):
  ymin = yrange[0]
  delta2ymax = yrange[1]-yrange[0]
  if x > x0:
    return ymin + ((x-x0)**n)*(delta2ymax)/(xa**n + (x-x0)**n)
  else:
    return ymin


# Physiological state s = (x,n)
# x is the physiological state
#   x=0 :veg
#   x=1 :veginflo
#   x=2 :inflo
#   x=3 :flower
#
# n is the # plastochrones in this state since creation of this meristem (current life span)

class MeristemData:
  def __init__(self, physio_age=0, plastnb = 0, statedur = 0, order=0):
    self.age = 0      # age since created in time units
    self.timecnt = 0  # time counter since last lat prod (cumulates dt for comparison with T)
    self.plastnb = plastnb  # in plastochrones (= # of lateral prods produced by this meristem)
    self.physio_age = physio_age
    self.statedur = statedur # nb pf plastochrones in this physio state
    if order == 0 or order == 1:
      self.dormant = False
    else:
      self.dormant = True
    self.order = order

# An organ model takes sets of initial and final values that define the characteristics 
# of the geometric model of an organ and returns interpolated values 
# i.e. the geometric model becomes a continuous fonction of time, G(t)
class OrganModel:
  def __init__(self, initial_length, initial_diam, initial_width, initial_opening_angle, final_length, final_diam, final_width, final_opening_angle, lifespan, color, size):
    self.initial_length = initial_length
    self.initial_diam = initial_diam
    self.initial_width = initial_width
    self.initial_opening_angle = initial_opening_angle
    self.final_length = final_length
    self.final_diam = final_diam
    self.final_width = final_width
    self.final_opening_angle = final_opening_angle
    self.lifespan = lifespan
    self.color = color
    self.size = size

  def length(self,tau): # these default linear functions can be overwritten in the subclasses
    return (self.initial_length + tau * (self.final_length - self.initial_length))*self.size

  def diam(self,tau):
    return (self.initial_diam + tau * (self.final_diam - self.initial_diam))*self.size

  def width(self,tau):
    return (self.initial_width + tau * (self.final_width - self.initial_width))*self.size

  def opening_angle(self,tau):
    return self.initial_opening_angle + tau * (self.final_opening_angle - self.initial_opening_angle)

  def shed(self,tau):
    return tau > self.lifespan

class InternodeModel(OrganModel):
  def __init__(self,
               meristem,
               age = 0,
               initial_length = InternodeInitialLength,
               initial_diam = InternodeInitialDiam,
               initial_width = InternodeInitialWidth,
               initial_opening_angle = InternodeInitialOpeningAngle,
               final_length = InternodeFinalLength,
               final_diam = InternodeFinalDiam,
               final_width = InternodeFinalWidth,
               final_opening_angle = InternodeFinalOpeningAngle,
               lifespan = InternodeLifespan,
               color = InternodeColor,
               size = InternodeSize
               ):
    super().__init__(initial_length, initial_diam, initial_width, initial_opening_angle, final_length, final_diam, final_width, final_opening_angle, lifespan, color, size)
    self.order = meristem.order
    self.physio_age = meristem.physio_age
    self.age = age

  # This function could be better defined in an abstract class for flat organs
  def getNerve(self, tau):
    if self.curvesPatch != None:
      return getSectionAt(tau,self.curvesPatch)
    else:
      return None

class SepalModel(OrganModel):
  def __init__(self,
               initial_length = SepalInitialLength,
               initial_diam = SepalInitialDiam,
               initial_width = SepalInitialWidth,
               initial_opening_angle = SepalInitialOpeningAngle,
               final_length = SepalFinalLength,
               final_diam = SepalFinalDiam,
               final_width = SepalFinalWidth,
               final_opening_angle = SepalFinalOpeningAngle,
               lifespan = SepalLifespan,
               color = SepalColor,
               size = SepalSize,
               curvesPatch = None
               ):
    super().__init__(initial_length, initial_diam, initial_width, initial_opening_angle, final_length, final_diam, final_width, final_opening_angle, lifespan, color, size)
    self.curvesPatch = curvesPatch
  
  # This function could be defined in an abstract class for flat organs
  def getNerve(self, tau):
    if self.curvesPatch != None:
      return getSectionAt(tau,self.curvesPatch)
    else:
      return None

class PetalModel(OrganModel):
  def __init__(self,
               initial_length = PetalInitialLength,
               initial_diam = PetalInitialDiam,
               initial_width = PetalInitialWidth,
               initial_opening_angle = PetalInitialOpeningAngle,
               final_length = PetalFinalLength,
               final_diam = PetalFinalDiam,
               final_width = PetalFinalWidth,
               final_opening_angle = PetalFinalOpeningAngle,
               lifespan = PetalLifespan,
               color = PetalColor,
               size = PetalSize,
               curvesPatch = None
               ):
    super().__init__(initial_length, initial_diam, initial_width, initial_opening_angle, final_length, final_diam, final_width, final_opening_angle, lifespan, color, size)
    self.curvesPatch = curvesPatch
    
  def getNerve(self, tau):
    if self.curvesPatch != None:
      return getSectionAt(tau,self.curvesPatch)
    else:
      return None

class CarpelModel(OrganModel):
  def __init__(self,
               initial_length = CarpelInitialLength,
               initial_diam = CarpelInitialDiam,
               initial_width = CarpelInitialWidth,
               initial_opening_angle = CarpelInitialOpeningAngle,
               final_length = CarpelFinalLength,
               final_diam = CarpelFinalDiam,
               final_width = CarpelFinalWidth,
               final_opening_angle = CarpelFinalOpeningAngle,
               lifespan = CarpelLifespan,
               color = CarpelColor,
               size = CarpelSize
               ):
    super().__init__(initial_length, initial_diam, initial_width, initial_opening_angle, final_length, final_diam, final_width, final_opening_angle, lifespan, color, size)

class PedicelModel(OrganModel):
  def __init__(self,
               initial_length = PedicelInitialLength,
               initial_diam = PedicelInitialDiam,
               initial_width = PedicelInitialWidth,
               initial_opening_angle = PedicelInitialOpeningAngle,
               final_length = PedicelFinalLength,
               final_diam = PedicelFinalDiam,
               final_width = PedicelFinalWidth,
               final_opening_angle = PedicelFinalOpeningAngle,
               lifespan = PedicelLifespan,
               color = PedicelColor,
               size = PedicelSize
               ):
    super().__init__(initial_length, initial_diam, initial_width, initial_opening_angle, final_length, final_diam, final_width, final_opening_angle, lifespan, color, size)

# make a transition of the apical meristem
# i.e. deterrmines its new physio_age, and state duration
def apicalTransition(d):
  statedur = d.statedur
  s = d.physio_age
  if s == 0: #VEG
    if statedur >= MAXVEGPLAST:
      d.physio_age = 1 # pass to VEGINFLO
      d.statedur = 0
  elif s == 1: #VEGINFLO
    if statedur >= MAXVEGINFLOPLAST:
      d.physio_age = 2 # pass to INFLO
      d.statedur = 0
  elif s == 2: #INFLO
    if statedur >= MAXINFLOPLAST:
      d.physio_age = 3
      d.statedur = 0

def lateralProduction(d):
  d.plastnb += 1 # inc the number of lat prods produced by this meristem
  d.timecnt = 0  # reset counter since last lat prod
  s = d.physio_age
  if s == 0: #VEG
    lateral_physio_age = 1
  elif s == 1: #VEGINFLO
    lateral_physio_age = 1
  elif s == 2: #INFLO
    lateral_physio_age = 3
  else:
    lateral_physio_age = -1
    print ("Error lateral physio age")
  return MeristemData(lateral_physio_age, 0, d.statedur, d.order+1)

# Increment time for meristems, by dt
# and checks if dormant meristem (for meristems that start a new branch)
def incTime(d,dt):
  d.age +=dt       # inc age since meristem creation
  d.timecnt += dt  # inc cnt since last lat prod

def checkLateralInitiationCondition(d):
  o = d.order
  s = d.physio_age
  if (o == 0 and s > 0) or (o == 1 and s > 1):
    return True
  else:
    return False
    
def checkIfMustProduce(d):
  if d.dormant == True: # a new meristem needs more time to create a primordium
    timeToGrow = T + GrowthDelay
  else: 
    timeToGrow = T     # by definition a meristem must wait 1 plastochrone before creating a new lateral primordium
  if d.timecnt > timeToGrow: # Time to create a new lateral primordium has been reached
    d.dormant = False
    return True
  else:
    return False


module Flower, Leaf, Pedicel, Petals, Carpel, SepalWhorl, Sepal, SepalMod, PetalWhorl, Petal, PetalMod, SimBar

#def End(lstring, lscene):
#  x = set()
#  for shape in lscene:
#    id = shape.id
#    x.add(lstring[id].name)     
#  unique_l = list(x)
#  for a in unique_l:
#    print(a)

def End(lstring, lscene):
  for shape in lscene:
    id = shape.id
    print(lstring[id].name)


Axiom: 
  #nproduce [SimBar(0,NbSimulationSteps,200)]
  #to bend a bit the steem
  nproduce -(10)
  nproduce /(90)
  nproduce @Tp(0,0,1)@Ts(MAXELASTICITY*0.05)
  d = MeristemData()
  nproduce M(d)

derivation length: NbSimulationSteps

production:

M(d):
  if checkIfMustProduce(d):
    if d.physio_age == 3:
      produce Flower(0)
    else: # lateral production
      d.statedur += 1 
      id = InternodeModel(d)
      nproduce I(id)
      nproduce /(alpha)
      # compute axillary leaf
      if d.physio_age < 2:
        nproduce [L(0, d.age, d.physio_age)]
      # Compute lateral production
      md = lateralProduction(d)
      if d.physio_age == 2 or checkLateralInitiationCondition(d) : # in inflo state always produce a flower
        nproduce [Beta(0) M(md)]
  # And keep an apical growth
  apicalTransition(d)
  incTime(d,dt)
  produce M(d)

I(d):
  d.age += dt
  produce I(d)

Flower(t):
  nproduce Flower(t + dt)

#Pedicel(t):
#  nproduce Pedicel(t+dt)

L(t, age_initiated, physio_age):
  produce L(t+dt, age_initiated, physio_age)

Beta(t):
  nproduce Beta(t+dt):


SimBar(t,tf,scale):
  noVariable = 0 #nproduce SimBar(t+dt,tf,scale)


interpretation:
maximum depth: 4

Beta(t):
  valrange = [10,100] # to map t on tau
  beta = hillcurve(t,5*day,valrange,15*day,2)
  #g = hillcurve(10.,beta-10.,1.,5*day,t)
  produce ^(-beta)

# Internode (includes the phyllotaxy)
I(d):
  valrange = [0,1] # to map t on tau
  if d.physio_age == 1:
    delay = 5*day
  else:
    delay = InternodeDelay
  tau = hillcurve(d.age,delay,valrange,InternodeHalfLife,InternodeSuddenty)
  if d.physio_age == 0:
    length = InternodeInitialLength
  elif d.physio_age == 1:
    length = 4*d.length(tau) # internodes in veg-inflo phase are longer
  else:
    length = d.length(tau)
  diam = d.diam(tau)
  color = 2 #d.color
  produce ;(color)_(diam)F(length)

# an organ has a proper time (here t) since it was created (t=0)
# shift is the moment where its start to grow

Flower(t):
  # At the scale of flowers, we also need to control the speed 
  flower_size = 0.9
  valrange = [0,15.*day]
  FlowerHalfLife = 4.*day
  FlowerDelay = 0.*day
  FlowerSuddenty = 2.8
  tau = hillcurve(t,FlowerDelay,valrange,FlowerHalfLife,FlowerSuddenty)
  nproduce Pedicel(t, flower_size)
  nproduce SepalWhorl(tau, flower_size)
  nproduce PetalWhorl(tau, flower_size)
  nproduce Carpel(tau,flower_size)

Pedicel(t, size):
  valrange = [0,1] # to map t on tau
  tau = hillcurve(t,PedicelDelay,valrange,PedicelHalfLife,PedicelSuddenty)
  pedicelmod = PedicelModel(size = size) # all values are initialized by default from global Sepal variables
  if t < PedicelLifespan :
    produce PedicelMod(pedicelmod, tau)

PedicelMod(pedicelmod, tau):
    length = pedicelmod.length(tau)
    diam = pedicelmod.diam(tau)
    angle = pedicelmod.opening_angle(tau)
    width = pedicelmod.width(tau)
    nproduce @Tp(0,0,-1)@Ts(MAXELASTICITY*0.002)
    # nF(length,size of a segment) 
    nproduce ;(pedicelmod.color)_(diam)nF(length,1/20.)

SepalWhorl(t, size):
  for i in range(4):
    nproduce ;(SepalColor)[/(90*i)Sepal(t, size)]

# OrganData(0,0.,20*day,19*day,10.)
Sepal(t, size):
  valrange = [0,1] # to map t on tau
  tau = hillcurve(t,SepalDelay,valrange,SepalHalfLife,SepalSuddenty)
  sepalmod = SepalModel(size = size, curvesPatch = sepal_curves_func) # all values are initialized by default from global Sepal variables
  if t < SepalLifespan :
      produce SepalMod(sepalmod, tau)

SepalMod(sepalmod, tau):
    #tau is in [0,1], 0 = Sepal initiation, 1 = Sepal final state (t=infinite)
    length = sepalmod.length(tau) # 2.0 #*tau
    diam = sepalmod.diam(tau)
    angle = sepalmod.opening_angle(tau)
    width = sepalmod.width(tau)
    #sepalnerve = sepalmod.getNerve(tau)
    sepalnerve = sepal_curves_func.getSectionAt(tau)
    nproduce ^(-90)f(diam)^(+90)^(-angle)
    nproduce @Gc Sweep(sepalnerve,  # nerve curve at time tau
                   section,     # section curve
                   length,      # scaling factor for organ nerve
                   len_seg,     # size of a segment as a proportion of 1
                   width,          # scaling factor of width
                   sepal_width_law # organ width law
                   )

PetalWhorl(t, size):
  nproduce /(45);(PetalColor)
  for i in range(4):
    nproduce [/(90*i)Petal(t, size)]

# OrganData(0,0.,20*day,19*day,10.)
Petal(t, size):
  valrange = [0,1] # to map t on tau
  tau = hillcurve(t,PetalDelay,valrange,PetalHalfLife,PetalSuddenty)
  petalmod = PetalModel(size = size, curvesPatch = petal_curves_func) # all values are initialized by default from global Sepal variables
  if t < PetalLifespan :
    produce PetalMod(petalmod, tau)

PetalMod(petalmod, tau):
    #tau is in [0,1], 0 = Sepal initiation, 1 = Sepal final state (t=infinite)
    length = petalmod.length(tau) # 2.0 #*tau
    diam = petalmod.diam(tau)
    angle = petalmod.opening_angle(tau)
    width = petalmod.width(tau)
    #petalnerve = petalmod.getNerve(tau)
    petalnerve = petal_curves_func.getSectionAt(tau)
    nproduce ^(-90)f(diam)^(+90)^(-angle)    
    nproduce @Gc Sweep(petalnerve,   # nerve curve at time tau
                   section,      # section curve
                   length,           # scaling factor for organ nerve
                   len_seg,      # size of a segment as a proportion of 1
                   width,           # scaling factor of width
                   sepal_width_law  # organ width law
                   )

Carpel(t, size):
  valrange = [0,1] # to map t on tau
  tau = hillcurve(t,CarpelDelay,valrange,CarpelHalfLife,CarpelSuddenty)
  carpelmod = CarpelModel(size = size) # all values are initialized by default from global Sepal variables
  if t < CarpelLifespan :
  	produce CarpelMod(carpelmod, tau)

CarpelMod(carpelmod, tau):
    length = carpelmod.length(tau) # 2.0 #*tau
    diam = carpelmod.diam(tau)
    angle = carpelmod.opening_angle(tau)
    width = carpelmod.width(tau)
    nproduce ;(carpelmod.color)_(diam)F(length)
    nproduce @O(diam)

L(age, age_initiated, physio_age) :
  #print(age, age_initiated, physio_age)
  valrange = [0.1, 1.]
  # target size of the leaf at date t
  targetsize = hillcurve(age,0.,valrange,20*day,1.)
  if physio_age == 1: # veginflo state
    sizefactor = 0.4
    addangle = 30
  else:
    valrange = [0.001, 1.]
    addangle = 0
    sizefactor = hillcurve(age_initiated,0.,valrange,6.*T,3.)
  size = leafsize*targetsize*sizefactor
  nproduce ^(-20-(40*targetsize+addangle))
  nproduce Leaf(size,size)

Leaf(l,w):
  # to bend slightly the petiole
  nproduce ;(2)@Tp(0,0,-1)@Ts(MAXELASTICITY*0.02)
  incline = -20 #max_leaf_petiol_deflection # - random()*max_leaf_petiol_deflection
  nproduce ^(incline)_(InternodeFinalDiam/4.)nF(l*petiol_prop,l*petiol_prop/10.)
  nproduce @Tp(0,0,1) @Ts(MAXELASTICITY*0.00)
  produce @Gc Sweep(nerve,section,(1-petiol_prop)*l,len_seg,w,width_law)

SimBar(t,tf,scale):
  #nproduce f(4)+(90)f(4)+(180)
  nproduce @M(0.,-2.0,-2.0)-(90)
  nproduce [;(6)F(tf/scale);(5)f(1)Label('{:03.1f}'.format(t/day))]
  nproduce ;(5)_(0.11)F(t/scale)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_0 = pgl.Material("Color_0" , ambient = (36,37,37) , diffuse = 4.83784 , specular = (89,89,89) , emission = (118,118,118) , )
	Color_0.name = "Color_0"
	context.turtle.setMaterial(0,Color_0)
	Color_2 = pgl.Material("Color_2" , ambient = (23,42,10) , diffuse = 2.30952 , )
	Color_2.name = "Color_2"
	context.turtle.setMaterial(2,Color_2)
	Color_4 = pgl.Material("Color_4" , ambient = (0,0,60) , diffuse = 3 , )
	Color_4.name = "Color_4"
	context.turtle.setMaterial(4,Color_4)
	Color_5 = pgl.Material("Color_5" , ambient = (60,0,60) , diffuse = 3 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	Color_6 = pgl.Material("Color_6" , ambient = (14,16,0) , diffuse = 4.5 , )
	Color_6.name = "Color_6"
	context.turtle.setMaterial(6,Color_6)
	Color_7 = pgl.Material("Color_7" , ambient = (60,60,15) , diffuse = 3 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	context.animation_timestep = 0.01
	context.options.setSelection('Warning with sharp module',0)
	context.options.setSelection('Turtle Path Optimization',0)
	import openalea.plantgl.all as pgl
	sepal_width_law = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.018134, 1),(0.340703, 0.137235, 1),(0.638432, 0.240216, 1),(0.919048, 0.177681, 1),(1, 0.00747046, 1)]) , 
	    )
	sepal_width_law.name = "sepal_width_law"
	petal_width_law = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0, 1),(0.198785, 0.25913, 1),(0.63704, 0.00789736, 1),(0.965662, 0.478393, 1),(1, 0, 1)]) , 
	    )
	petal_width_law.name = "petal_width_law"
	width_law = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.018134, 1),(0.2847, 0.22124, 1),(0.638432, 0.240216, 1),(0.919048, 0.177681, 1),(1, 0.00747046, 1)]) , 
	    )
	width_law.name = "width_law"
	panel_0 = ({'name': 'Functions', 'active': True, 'visible': True},[('Function',sepal_width_law),('Function',petal_width_law),('Function',width_law)])
	import openalea.plantgl.all as pgl
	nerve = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.143939, 0.0727273, 1),(0.166667, 0.0227273, 1),(0.338636, -0.0681818, 1),(0.45, -0.154545, 1)]) , 
	    )
	nerve.name = "nerve"
	section = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.256416, -0.0840166, 1),(0.0565162, -0.150645, 1),(0.494569, 0.0034361, 1)]) , 
	    )
	section.name = "section"
	petal_nerve1 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.166667, 0, 1),(0.355778, 0.0264249, 1),(0.570172, 0.0971782, 1)]) , 
	    )
	petal_nerve1.name = "petal_nerve1"
	petal_nerve2 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.166667, 0, 1),(0.341986, -0.045523, 1),(0.48431, -0.116555, 1)]) , 
	    )
	petal_nerve2.name = "petal_nerve2"
	petal_nerve3 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.166667, -0.0555597, 1),(0.282594, -0.210366, 1),(0.161591, -0.45963, 1)]) , 
	    )
	petal_nerve3.name = "petal_nerve3"
	petal_nerve4 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.166667, 0, 1),(0.0880921, -0.0477296, 1),(0.271367, -0.166843, 1),(0.354707, -0.266371, 1)]) , 
	    )
	petal_nerve4.name = "petal_nerve4"
	sepal_nerve1 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.194255, -0.151498, 1),(0.201555, -0.171434, 1),(0.565102, -0.0418269, 1),(0.69112, 0.192123, 1)]) , 
	    )
	sepal_nerve1.name = "sepal_nerve1"
	sepal_nerve2 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.184848, -0.0818182, 1),(0.0845451, -0.0955609, 1),(0.330647, -0.113962, 1),(0.509132, -0.0730586, 1)]) , 
	    )
	sepal_nerve2.name = "sepal_nerve2"
	sepal_nerve3 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.140193, -0.0368866, 1),(0.0736534, -0.0536249, 1),(0.287858, -0.054105, 1),(0.40817, -0.0405354, 1)]) , 
	    )
	sepal_nerve3.name = "sepal_nerve3"
	sepal_nerve4 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.5, 0, 1),(-0.14446, -0.0906015, 1),(0.114263, -0.114894, 1),(0.27083, -0.122561, 1),(0.41479, -0.113124, 1)]) , 
	    )
	sepal_nerve4.name = "sepal_nerve4"
	panel_1 = ({'name': 'Curve2D', 'active': True, 'visible': True},[('Curve2D',nerve),('Curve2D',section),('Curve2D',petal_nerve1),('Curve2D',petal_nerve2),('Curve2D',petal_nerve3),('Curve2D',petal_nerve4),('Curve2D',sepal_nerve1),('Curve2D',sepal_nerve2),('Curve2D',sepal_nerve3),('Curve2D',sepal_nerve4)])
	parameterset = [panel_0,panel_1,]
	context["__functions__"] = [('sepal_width_law',sepal_width_law),('petal_width_law',petal_width_law),('width_law',width_law),]
	context["__curves__"] = [('nerve',nerve),('section',section),('petal_nerve1',petal_nerve1),('petal_nerve2',petal_nerve2),('petal_nerve3',petal_nerve3),('petal_nerve4',petal_nerve4),('sepal_nerve1',sepal_nerve1),('sepal_nerve2',sepal_nerve2),('sepal_nerve3',sepal_nerve3),('sepal_nerve4',sepal_nerve4),]
	context["__parameterset__"] = parameterset
	context["sepal_width_law"] = pgl.QuantisedFunction(sepal_width_law)
	context["petal_width_law"] = pgl.QuantisedFunction(petal_width_law)
	context["width_law"] = pgl.QuantisedFunction(width_law)
	context["nerve"] = nerve
	context["section"] = section
	context["petal_nerve1"] = petal_nerve1
	context["petal_nerve2"] = petal_nerve2
	context["petal_nerve3"] = petal_nerve3
	context["petal_nerve4"] = petal_nerve4
	context["sepal_nerve1"] = sepal_nerve1
	context["sepal_nerve2"] = sepal_nerve2
	context["sepal_nerve3"] = sepal_nerve3
	context["sepal_nerve4"] = sepal_nerve4
__authors__ = 'C. Godin\n'
__institutes__ = 'Inria - RDP Mosaic'
__copyright__ = 'C. Godin'
__description__ = 'Model of Arabidopsis development\n\nSpatial and time units have been made realistic\n\nThe meristem has:\n\n- a state s consisting of two numbers: (x,d)\nx: physiological state (0: Vegetative, 1:VegInflo, 2:Inflo, 3: Flower)\nd: count of the number of organs produced in the current physiological state\n\n- a calendar age that counts the number of time units since the beginning of the simulation\n\n- a plastochrone age that counts the number of organ produced since it was created\n\n- a meristem can be dormant\n\n\n\n\n\n'
